name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t flask-app:latest .
          docker images

      - name: Test Docker container
        run: |
          # 컨테이너를 백그라운드에서 실행
          docker run -d --name flask-test -p 5000:5000 flask-app:latest
          
          # 컨테이너가 시작될 때까지 대기
          sleep 10
          
          # 헬스체크
          curl -f http://localhost:5000/ || exit 1
          
          # 컨테이너 로그 확인
          docker logs flask-test
          
          # 테스트 완료 후 컨테이너 정리
          docker stop flask-test
          docker rm flask-test

  docker-push:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest 